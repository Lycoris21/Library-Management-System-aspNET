@model LibraryManagementSystemASP.Models.LibrarianOperationsManagementViewModel

@{
    ViewData["Title"] = "Librarian Operations Management";
}

<html lang="en">
<head>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        .table th, .table td {
            vertical-align: middle;
        }

        .btn-custom {
            background-color: #316FA2;
            color: white;
        }

        .btn-custom-delete {
            background-color: #c82333;
            color: white;
        }

        .table thead th {
            background-color: #00233D;
            color: white;
            position: sticky;
            top: 0;
            z-index: 1;
            margin-top: 0;
        }

        .table-container {
            max-height: 500px;
            overflow-y: auto;
            padding-top: 0;
            width: 50%;
        }
    </style>
</head>
<body>
    <div class="px-5 h-100 mb-5">
        <div class="row">
            <div class="col-md-6 d-flex">
                <input type="text" id="search" class="form-control ms-2" placeholder="Search records">
            </div>
            <div class="col-md-6 d-flex align-items-end">
                <button class="btn btn-custom ms-2" onclick="filterRecords()">Search</button>
                <button class="btn btn-custom ms-2" data-bs-toggle="modal" data-bs-target="#newBorrowingModal">New Borrowing</button>
            </div>
        </div>

        <div class="row">
            <h2 class="mt-3 w-50">Reserved - @Model.Reservations.Count</h2>
            <h2 class="mt-3 w-50">Borrowed - @Model.Borrowings.Count</h2>
        </div>

        <div class="row">
            <div class="table-container">
                <div class="reservations-container">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Book Title</th>
                                <th>More Details</th>
                            </tr>
                        </thead>
                        <tbody id="reservationTableBody">
                            @foreach (var record in Model.Reservations)
                            {
                                <tr>
                                    <td>@(record?.User?.Username ?? "N/A")</td>
                                    <td>@(record?.Book?.Title ?? "N/A")</td>
                                    <td>
                                        <button class="btn btn-custom" data-bs-toggle="modal" data-bs-target="#reservationDetailsModal"
                                                onclick="loadReservationDetails(@record.ReservationId)">
                                            More Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="table-container">
                <div class="borrowing-container">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Book Title</th>
                                <th>More Details</th>
                            </tr>
                        </thead>
                        <tbody id="borrowingTableBody">
                            @foreach (var record in Model.Borrowings)
                            {
                                <tr>
                                    <td>@(record.User.Username ?? "N/A")</td>
                                    <td>@(record.Book.Title ?? "N/A")</td>
                                    <td>
                                        <button class="btn btn-custom" data-bs-toggle="modal" data-bs-target="#borrowingDetailsModal"
                                                onclick="loadBorrowingDetails(@record.BorrowId)">
                                            More Details
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Reservation Details Modal -->
    <div class="modal fade" id="reservationDetailsModal" tabindex="-1" role="dialog" aria-labelledby="reservationDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reservationDetailsModalLabel">Reservation Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Reservation ID:</strong> <span id="reservationId"></span></p>
                    <p><strong>User ID:</strong> <span id="userId"></span></p>
                    <p><strong>Username:</strong> <span id="username"></span></p>
                    <p><strong>Book ID:</strong> <span id="bookId"></span></p>
                    <p><strong>Book Title:</strong> <span id="bookTitle"></span></p>
                    <p><strong>Reservation Status:</strong> <span id="reservationStatus"></span></p>
                    <p><strong>Reserved On:</strong> <span id="reservedOn"></span></p>
                    <p><strong>Collection Deadline:</strong> <span id="collectionDeadline"></span></p>
                    <p><strong>Last Updated:</strong> <span id="lastUpdated"></span></p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-custom" id="collectedButton">Collected</button>
                    <button class="btn btn-custom-delete" id="voidButton">Void</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Borrowing Details Modal -->
    <div class="modal fade" id="borrowingDetailsModal" tabindex="-1" aria-labelledby="borrowingDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="borrowingDetailsModalLabel">Borrowing Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Borrowing ID:</strong> <span id="borrowId"></span></p>
                    <p><strong>User ID:</strong> <span id="borrowingUserId"></span></p> <!-- Corrected ID -->
                    <p><strong>Username:</strong> <span id="borrowingUsername"></span></p>
                    <p><strong>Book ID:</strong> <span id="borrowingBookId"></span></p>
                    <p><strong>Book Title:</strong> <span id="borrowingBookTitle"></span></p>
                    <p><strong>Borrowing Status:</strong> <span id="borrowingStatus"></span></p>
                    <p><strong>Borrowed On:</strong> <span id="borrowedOn"></span></p>
                    <p><strong>Supposed Return Date:</strong> <span id="supposedReturnDate"></span></p>
                    <p><strong>Actual Return Date:</strong> <span id="actualReturnDate"></span></p>
                    <p><strong>Last Updated:</strong> <span id="borrowingLastUpdated"></span></p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-custom" id="returnedButton">Returned</button> <!-- Use returnedButton -->
                </div>
            </div>
        </div>
    </div>

    <!-- Add Borrowing Modal -->
    <div class="modal fade" id="newBorrowingModal" tabindex="-1" role="dialog" aria-labelledby="newBorrowingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newBorrowingModalLabel">New Borrowing</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="newBorrowingForm">
                        <div class="mb-3">
                            <label for="usernameInput" class="form-label">Username</label>
                            <input type="text" class="form-control" id="usernameInput" required>
                        </div>
                        <div class="mb-3">
                            <label for="bookTitleDropdown" class="form-label">Book Title</label>
                            <select class="form-select" id="bookTitleDropdown" required>
                                <option value="">Select a book</option>
                                <!-- Book options will be populated here -->
                            </select>
                        </div>
                        <button type="submit" class="btn btn-custom">Add Borrowing</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>

            // Fetch available books and populate the dropdown
        function loadAvailableBooks() {
            fetch('/Librarian/GetAvailableBooks')
                .then(response => response.json())
                .then(data => {
                    const dropdown = document.getElementById('bookTitleDropdown');
                    dropdown.innerHTML = ''; // Clear existing options
                    data.forEach(book => {
                        const option = document.createElement('option');
                        option.value = book.BookId;
                        option.textContent = `${book.Title} (Available: ${book.Quantity})`;
                        dropdown.appendChild(option);
                    });
                });
        }

        document.getElementById('newBorrowingModal').addEventListener('show.bs.modal', loadAvailableBooks);

        // Handle form submission
        document.getElementById('newBorrowingForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const username = document.getElementById('usernameInput').value;
            const bookId = document.getElementById('bookTitleDropdown').value;

            fetch('/Librarian/AddBorrowing', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username: username, bookId: bookId })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                location.reload();
            });
        });
                    function loadReservationDetails(reservationId) {
            fetch(`/Librarian/GetReservationDetails/${reservationId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success === false) {
                        alert(data.message);
                        return;
                    }
                    document.getElementById("reservationId").textContent = data.reservationId;
                    document.getElementById("userId").textContent = data.userId;
                    document.getElementById("username").textContent = data.username;
                    document.getElementById("bookId").textContent = data.bookId;
                    document.getElementById("bookTitle").textContent = data.bookTitle;
                    document.getElementById("reservationStatus").textContent = data.status;
                    document.getElementById("reservedOn").textContent = new Date(data.reservedOn).toLocaleString();
                    document.getElementById("collectionDeadline").textContent = new Date(data.collectionDeadline).toLocaleString();
                    document.getElementById("lastUpdated").textContent = new Date(data.lastUpdated).toLocaleString();

                    // Set up the button click handlers
                    document.getElementById("collectedButton").onclick = function() {
                        updateReservationStatus(data.reservationId, 'Collected');
                    };
                    document.getElementById("voidButton").onclick = function() {
                        updateReservationStatus(data.reservationId, 'Void');
                    };
                });
        }

        function loadBorrowingDetails(borrowId) {
            fetch(`/Librarian/GetBorrowingDetails/${borrowId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success === false) {
                        alert(data.message);
                        return;
                    }
                    document.getElementById("borrowId").textContent = data.borrowId;
                    document.getElementById("borrowingUser Id").textContent = data.userId;
                    document.getElementById("borrowingUsername").textContent = data.username;
                    document.getElementById("borrowingBookId").textContent = data.bookId;
                    document.getElementById("borrowingBookTitle").textContent = data.bookTitle;
                    document.getElementById("borrowingStatus").textContent = data.status;
                    document.getElementById("borrowedOn").textContent = new Date(data.borrowedOn).toLocaleString();
                    document.getElementById("supposedReturnDate").textContent = new Date(data.supposedReturnDate).toLocaleString();
                    document.getElementById("actualReturnDate").textContent = data.actualReturnDate ? new Date(data.actualReturnDate).toLocaleString() : "N/A";
                    document.getElementById("borrowingLastUpdated").textContent = new Date(data.lastUpdated).toLocaleString();

                    document.getElementById("returnedButton").onclick = function() {
                        updateBorrowingStatus(data.borrowId);
                    };
                });
        }

        function updateReservationStatus(reservationId, newStatus) {
            fetch(`/Librarian/UpdateReservationStatus`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reservationId: reservationId, newStatus: newStatus })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                location.reload(); // Reload the page to see updated data
            });
        }

        function updateBorrowingStatus(borrowId) {
            fetch(`/Librarian/UpdateBorrowingStatus`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ borrowId: borrowId })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                location.reload(); // Reload the page to see updated data
            });
        }

        document.getElementById('search').addEventListener('keypress', function(event) {
            // Trigger search if Enter key is pressed
            if (event.key === 'Enter') {
                filterRecords();
            }
        });

        function filterRecords() {
            let search = document.getElementById("search").value.toLowerCase();
            filterTable(search, 'reservationTableBody');
            filterTable(search, 'borrowingTableBody');
        }

        function filterTable(search, tableId) {
            let table = document.getElementById(tableId);
            let rows = table.getElementsByTagName("tr");

            for (let i = 0; i < rows.length; i++) {
                let cells = rows[i].getElementsByTagName("td");
                let match = false;
                for (let j = 0; j < cells.length; j++) {
                    if (cells[j].innerText.toLowerCase().includes(search)) {
                        match = true;
                        break;
                    }
                }
                rows[i].style.display = match ? "" : "none";
            }
        }
    </script>
</body>
</html>